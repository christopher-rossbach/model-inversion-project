import torch


class RunConfig:
    def __init__(
            self,
            scale_steps: dict = {-1: 32, 400: 64, 900:128, 1800:224},
            loss_calculate_avg_clip: bool = False,
            loss_calculate_avg_identity: bool = False,
            loss_calculate_avg_resnet18: bool = False,
            loss_calculate_avg_resnet34: bool = False,
            loss_calculate_avg_resnet50: bool = False,
            loss_calculate_avg_resnet101: bool = False,
            loss_calculate_avg_resnet152: bool = False,
            loss_calculate_avg_vgg16: bool = False,
            loss_calculate_avg_vgg19: bool = False,
            loss_calculate_ref_clip: bool = False,
            loss_calculate_ref_identity: bool = False,
            loss_calculate_ref_resnet18: bool = False,
            loss_calculate_ref_resnet34: bool = False,
            loss_calculate_ref_resnet50: bool = False,
            loss_calculate_ref_resnet101: bool = False,
            loss_calculate_ref_resnet152: bool = False,
            loss_calculate_ref_vgg16: bool = False,
            loss_calculate_ref_vgg19: bool = False,
            loss_calculate_classification_1k: bool = False,
            loss_calculate_clip: bool = False,
            loss_calculate_lpips_alex: bool = True,
            loss_calculate_lpips_vgg: bool = True,
            loss_calculate_lpips_squeeze: bool = True,
            loss_calculate_rn: bool = False,
            loss_calculate_sclip: bool = False,
            loss_calculate_ssim_7: bool = True,
            loss_calculate_ssim_11: bool = True,
            loss_calculate_tv: bool = False,
            loss_function_avg_clip: str = "cosine_similarity",
            loss_function_avg_identity: str = "mse",
            loss_function_avg_vgg16: str = "mse",
            loss_function_avg_vgg19: str = "mse",
            loss_function_avg_resnet18: str = "mse",
            loss_function_avg_resnet34: str = "mse",
            loss_function_avg_resnet50: str = "mse",
            loss_function_avg_resnet101: str = "mse",
            loss_function_avg_resnet152: str = "mse",
            loss_function_ref_clip: str = "cosine_similarity",
            loss_function_ref_identity: str = "mse",
            loss_function_ref_vgg16: str = "mse",
            loss_function_ref_vgg19: str = "mse",
            loss_function_ref_resnet18: str = "mse",
            loss_function_ref_resnet34: str = "mse",
            loss_function_ref_resnet50: str = "mse",
            loss_function_ref_resnet101: str = "mse",
            loss_function_ref_resnet152: str = "mse",
            loss_function_classification_1k: str = "cosine_similarity",
            loss_function_clip: str = "cosine_similarity",
            loss_function_rn: str = "cosine_similarity",
            loss_function_sclip: str = "cosine_similarity",
            loss_function_tv: str = "linear",
            loss_scale_avg_clip: float = 0.0,
            loss_scale_avg_identity: float = 0.0,
            loss_scale_avg_vgg16: float = 0.0,
            loss_scale_avg_vgg19: float = 0.0,
            loss_scale_avg_resnet18: float = 0.0,
            loss_scale_avg_resnet34: float = 0.0,
            loss_scale_avg_resnet50: float = 0.0,
            loss_scale_avg_resnet101: float = 0.0,
            loss_scale_avg_resnet152: float = 0.0,
            loss_scale_ref_clip: float = 0.0,
            loss_scale_ref_identity: float = 0.0,
            loss_scale_ref_vgg16: float = 0.0,
            loss_scale_ref_vgg19: float = 0.0,
            loss_scale_ref_resnet18: float = 0.0,
            loss_scale_ref_resnet34: float = 0.0,
            loss_scale_ref_resnet50: float = 0.0,
            loss_scale_ref_resnet101: float = 0.0,
            loss_scale_ref_resnet152: float = 0.0,
            loss_scale_classification_1k: float = 0.0,
            loss_scale_clip: float = 0.0,
            loss_scale_rn: float = 0.0,
            loss_scale_sclip: float = 0.0,
            loss_scale_tv: float = 0.0,
            init_method: str = "gaussian",
            init_noising_factor: float = 0.0,
            learning_rate: float = 10,
            learning_rate_changes: dict = {},
            iterations: int = 2000,
            fixed_gradient_length: bool = True,
            no_relu_for_ref_and_avg: bool = True, # if True, the last relu from the networks get removed before calculating averages
            apply_relu_on_ref_and_avg: bool = False, # if True, a ReLU is applied after calculating the averages
            apply_smart_relu_on_ref_and_avg: bool = False, # if True, ReLu is not applied to coordinates where the average/reference is bigger than 0
            optimization_space: str = "image",
            optimization_space_changes: dict = {},
            ref_embedding_clip: torch.Tensor = None,
            ref_embedding_identity: torch.Tensor = None,
            ref_embedding_resnet18: torch.Tensor = None,
            ref_embedding_resnet34: torch.Tensor = None,
            ref_embedding_resnet50: torch.Tensor = None,
            ref_embedding_resnet101: torch.Tensor = None,
            ref_embedding_resnet152: torch.Tensor = None,
            ref_embedding_vgg16: torch.Tensor = None,
            ref_embedding_vgg19: torch.Tensor = None,
            ):
        self.loss_scale = {
            "avg" : {
                "clip": loss_scale_avg_clip,
                "identity": loss_scale_avg_identity,
                "resnet18": loss_scale_avg_resnet18,
                "resnet34": loss_scale_avg_resnet34,
                "resnet50": loss_scale_avg_resnet50,
                "resnet101": loss_scale_avg_resnet101,
                "resnet152": loss_scale_avg_resnet152,
                "vgg16": loss_scale_avg_vgg16,
                "vgg19": loss_scale_avg_vgg19,
            },
            "ref": {
                "clip": loss_scale_ref_clip,
                "identity": loss_scale_ref_identity,
                "resnet18": loss_scale_ref_resnet18,
                "resnet34": loss_scale_ref_resnet34,
                "resnet50": loss_scale_ref_resnet50,
                "resnet101": loss_scale_ref_resnet101,
                "resnet152": loss_scale_ref_resnet152,
                "vgg16": loss_scale_ref_vgg16,
                "vgg19": loss_scale_ref_vgg19,
            },
            "classification_1k": loss_scale_classification_1k,
            "clip": loss_scale_clip,
            "rn": loss_scale_rn,
            "sclip": loss_scale_sclip,
            "tv": loss_scale_tv,
        }
        self.loss_calculate = {
            "avg": {
                "clip": loss_calculate_avg_clip or loss_scale_avg_clip != 0.0,
                "identity": loss_calculate_avg_identity or loss_scale_avg_identity != 0.0,
                "resnet18": loss_calculate_avg_resnet18 or loss_scale_avg_resnet18 != 0.0,
                "resnet34": loss_calculate_avg_resnet34 or loss_scale_avg_resnet34 != 0.0,
                "resnet50": loss_calculate_avg_resnet50 or loss_scale_avg_resnet50 != 0.0,
                "resnet101": loss_calculate_avg_resnet101 or loss_scale_avg_resnet101 != 0.0,
                "resnet152": loss_calculate_avg_resnet152 or loss_scale_avg_resnet152 != 0.0,
                "vgg16": loss_calculate_avg_vgg16 or loss_scale_avg_vgg16 != 0.0,
                "vgg19": loss_calculate_avg_vgg19 or loss_scale_avg_vgg19 != 0.0,
            },
            "ref": {
                "clip": loss_calculate_ref_clip or loss_scale_ref_clip != 0.0,
                "identity": loss_calculate_ref_identity or loss_scale_ref_identity != 0.0,
                "resnet18": loss_calculate_ref_resnet18 or loss_scale_ref_resnet18 != 0.0,
                "resnet34": loss_calculate_ref_resnet34 or loss_scale_ref_resnet34 != 0.0,
                "resnet50": loss_calculate_ref_resnet50 or loss_scale_ref_resnet50 != 0.0,
                "resnet101": loss_calculate_ref_resnet101 or loss_scale_ref_resnet101 != 0.0,
                "resnet152": loss_calculate_ref_resnet152 or loss_scale_ref_resnet152 != 0.0,
                "vgg16": loss_calculate_ref_vgg16 or loss_scale_ref_vgg16 != 0.0,
                "vgg19": loss_calculate_ref_vgg19 or loss_scale_ref_vgg19 != 0.0,
            },
            "classification_1k": loss_calculate_classification_1k or loss_scale_classification_1k != 0.0,
            "rn": loss_calculate_rn or loss_scale_rn != 0.0,
            "clip": loss_calculate_clip or loss_scale_clip != 0.0,
            "sclip": loss_calculate_sclip or loss_scale_sclip != 0.0,
            "tv": loss_calculate_tv or loss_scale_tv != 0.0,
            "lpips_alex": loss_calculate_lpips_alex,
            "lpips_vgg": loss_calculate_lpips_vgg,
            "lpips_squeeze": loss_calculate_lpips_squeeze,
            "ssim": {
                7: loss_calculate_ssim_7,
                11: loss_calculate_ssim_11,
            },
        }
        self.loss_function = {
            "avg": {
                "clip": loss_function_avg_clip,
                "identity": loss_function_avg_identity,
                "resnet18": loss_function_avg_resnet18,
                "resnet34": loss_function_avg_resnet34,
                "resnet50": loss_function_avg_resnet50,
                "resnet101": loss_function_avg_resnet101,
                "resnet152": loss_function_avg_resnet152,
                "vgg16": loss_function_avg_vgg16,
                "vgg19": loss_function_avg_vgg19,
            },
            "ref": {
                "clip": loss_function_ref_clip,
                "identity": loss_function_ref_identity,
                "resnet18": loss_function_ref_resnet18,
                "resnet34": loss_function_ref_resnet34,
                "resnet50": loss_function_ref_resnet50,
                "resnet101": loss_function_ref_resnet101,
                "resnet152": loss_function_ref_resnet152,
                "vgg16": loss_function_ref_vgg16,
                "vgg19": loss_function_ref_vgg19,
            },
            "classification_1k": loss_function_classification_1k,
            "clip": loss_function_clip,
            "rn": loss_function_rn,
            "sclip": loss_function_sclip,
            "tv": loss_function_tv,
        }
        self.init_method = init_method
        self.init_noising_factor = init_noising_factor
        self.scale_steps = scale_steps
        self.learning_rate = learning_rate
        self.learning_rate_changes = learning_rate_changes
        self.iterations = iterations
        self.fixed_gradient_length = fixed_gradient_length
        self.no_relu_for_ref_and_avg = no_relu_for_ref_and_avg
        self.apply_relu_on_ref_and_avg = apply_relu_on_ref_and_avg
        self.apply_smart_relu_on_ref_and_avg = apply_smart_relu_on_ref_and_avg
        self.optimization_space = optimization_space
        self.optimization_space_changes = optimization_space_changes
        self.ref_embedding = {
            "clip": ref_embedding_clip,
            "identity": ref_embedding_identity,
            "resnet18": ref_embedding_resnet18,
            "resnet34": ref_embedding_resnet34,
            "resnet50": ref_embedding_resnet50,
            "resnet101": ref_embedding_resnet101,
            "resnet152": ref_embedding_resnet152,
            "vgg16": ref_embedding_vgg16,
            "vgg19": ref_embedding_vgg19,
        }

    def get_as_dict(self):
        return self.__dict__
